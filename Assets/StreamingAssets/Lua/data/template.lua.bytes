

local function ParseTable(value)
	if not value then return {} end
	local tbl = {}
	local kvp = value:split(';') --Split(value,';')
	for _,v in ipairs(kvp) do
		tbl[#tbl+1] = v:split(',')--Split(v,',')
	end
	return tbl
end

require 'data.message'
require 'data.template.uipaneltemplate'
require 'data.template.itemtemplate'

module('Template', package.seeall)

GetErrorString = function (code)
	return GameMessage['error_'..code]
end


for _,v in pairs(ItemTemplate) do
	v.useCostMap = ParseTable(v.useCost)
	v.useRewardMap = ParseTable(v.useReward)
	v.hlinkArray = Split(v.hyperlink,',')
	v.hdescArray = Split(v.hdesc,',')		
	v.GetHDesc = function (index)
		if index < 0 and index >= #v.hdescArray then
			return ""
		end
		return v.hdescArray[index+1]
	end
	v.GetHLink = function (index)
		if index <= 0 and index > #v.hlinkArray then
			return 0
		end
		return tonumber(v.hlinkArray[index])
	end			
end	


GetItemTemplate = function (entry)
	if not entry or entry == 0 then return end
	local item
	if entry > 90000 and entry < 100000 then
		item = EquipTemplate[entry]
	else
		item = ItemTemplate[entry]
	end
	if not item then logerror('ItemTemplate missing:'..entry) end
	return item
end

GetItemTemplateByType = function (entry)
	return ItemMainTypeTemplate[entry]
end

require 'data.template.campaigntemplate'
GetCampaignTemplate = function (entry)
	return CampaignTemplate[entry]
end
GetCampaignCount = function ()
	return #CampaignTemplate
end
GetCampaignChapter = function (stageID)
	for k,v in pairs(CampaignTemplate) do
	 	if v.min <= stageID and stageID <= v.max then
	 		return k
	 	end
	 end
end


require 'data.template.constanttemplate'

-----------------------------
--内部导出项
GetAvatarTemplate = function (entry)
    import 'AvatarTemplate'
	return LuaHelp.GetAvatarTemplate(entry);
end

