
require "ui.tips.tipsbase"

CPanelTips ={}
CPanelTips.wndname = 'TipsPanel'
local ShowTipsTypes =  { Custom=0, Simple=1, }
local tipsShowInfo											--描述待显示TipUI信息
local bUseFixedPosition= false
local panelMap = {}											--存放各类TipUIPrefab
local gameObject
local transform
local mSize = Vector3.zero;
local mSize0 = Vector4.zero;
local FixedRect;
local tipsList = {}											--可能是用于记录多个TipUI同时显示
local uiSprite
local TipsTextItem

local function PosToScreen(pos)
	return pos * UIUtility.screenScale;
end

local function GetPanelGameObject(name, solo,index)
	if (solo) then
		for i,found in ipairs(tipsList) do
			if (found and found.gameObject.name == name) then
				return found;
			end
		end
	end
	
	local tips;
	local go=panelMap[name];
	if (go) then
		local subPanel = GameObject.Instantiate(go);
		if index then
			subPanel.name = name .. index
		else
			subPanel.name = name;
		end
		subPanel:SetActive(true);
		subPanel.transform:AttachTo(transform, true);	
		tips = GetTipsComponentTable(subPanel,name) --subPanel:GetComponent('UITips');
	else
		logwarning("Can't find tips panel " .. name);
	end
		
	
	if (tips) then
		tips:CreateBackground(uiSprite);
		tipsList[#tipsList+1]=tips;	
	end
	
	return tips;
end

	
local function CalculatePosition(pos, size)
	local ratio = 1;

	local screenWidth = LuaHelp.width;
	local screenHeight = LuaHelp.height;

	local tipsSize = PosToScreen(mSize);
	local positions = {};
	positions[1] = Vector3(pos.x - size.x* 0.5 - tipsSize.x* ratio, pos.y + size.y * 0.5 + tipsSize.y* ratio, pos.z);		
	positions[2] = Vector3(pos.x + size.x* 0.5, pos.y + size.y * 0.5 + tipsSize.y* ratio, pos.z);
	positions[3] = Vector3(pos.x - size.x* 0.5 - tipsSize.x* ratio, pos.y - size.y * 0.5, pos.z);
	positions[4] = Vector3(pos.x + size.x* 0.5, pos.y - size.y * 0.5, pos.z);
	for i,v in ipairs(positions) do
		local tx1 = v.x;
		local ty1 = v.y;
		local tx2 = v.x + tipsSize.x * ratio;
		local ty2 = v.y - tipsSize.y * ratio;	
		
		local min = Vector2(0, 0);
		local max = Vector2(screenWidth, screenHeight);
		if (tx1 >= min.x and tx1 <= max.x and ty1 >= min.y and ty1 <= max.y and
		    tx2 >= min.x and tx2 <= max.x and ty2 >= min.y and ty2 <= max.y) then
			return v--positions[i];
		end
	end
	
	--[left positions[1].x]   [right positions[2].x]illegal
	local illegalLeft = positions[1].x < 0
	local illegalRight = positions[2].x + tipsSize.x * ratio > screenWidth
	if illegalLeft and illegalRight then
		if math.abs(positions[1].x) > math.abs(positions[2].x + tipsSize.x * ratio -screenWidth) then
			pos.x = screenWidth - size.x* 0.5 - tipsSize.x* ratio
		else
			pos.x = 5
		end
	elseif illegalLeft then
		pos.x = positions[2].x
	elseif illegalRight then
		pos.x = positions[1].x
	end
	
	local illegalTop = pos.y + size.y * 0.5 + tipsSize.y* ratio > screenHeight
	local illegalButtom = pos.y - size.y * 0.5 - tipsSize.y * ratio< 0
	if illegalTop and illegalButtom then
		pos.y = tipsSize.y * ratio * 0.5 + screenHeight*0.5
	elseif illegalTop then
		pos.y = positions[3].y --screenHeight
	elseif illegalButtom then
		pos.y = positions[1].y --tipsSize.y * ratio * 0.5
	end
	return pos
end
---------------------------------------------
function CPanelTips:OnOpen (objScript)
    self.m_wnd = objScript.gameObject
    gameObject = self.m_wnd
    transform = self.m_wnd.transform
	local ctrls = objScript.vecCtrl
	uiSprite = ctrls[0]:GetComponent('UISprite')

	for i=1,5 do
		panelMap[ctrls[i].name] = ctrls[i]
	end
	TipsTextItem = ctrls[6]

	self:Init()
end

function CPanelTips:OnRefresh()
	self:Init()
end

function CPanelTips:Init()

	if not tipsShowInfo then
		UIUtility.ShowPanel(UIUtility.RESERVED_SCREEN, "TipsPanel");
		return;
	end
		
	if (tipsShowInfo.Type == ShowTipsTypes.Custom) then
		self:OpenCustomTips(tipsShowInfo);
	elseif (tipsShowInfo.Type == ShowTipsTypes.Simple) then
		self:OpenSimpleTips(tipsShowInfo);
	end
		
	self:ShowPanel();	
end

function CPanelTips:ClosePanel()
	for _,tips in ipairs(tipsList) do
		if tips then
			tips:ClearItems();
			GameObject.DestroyImmediate(tips.gameObject);
		end
	end
	tipsList = {}
end

function CPanelTips:OnClose ()
	self:ClosePanel()
end

function CPanelTips:OpenCustomTips(cti)
	if (cti.Clear) then
		self:ClosePanel();
	end
	--logVar(cti.Paras)

	--logwarning(cti.Paras)
	local bShowBaptize = false
	local bShowEh = false
	--是配件面板情况下
	if cti.Paras[1].objs[2] then
		local tpl1 = cti.Paras[1].objs[1].template

		if not cti.Paras[2] then
			bShowEh = tpl1.lv <= (cti.Paras[1].objs[1].isOutData and cti.Paras[1].objs[1].myInfo.level or g_Hero:GetLevel())
			bShowBaptize = false
		else
			local tpl2 = cti.Paras[2].objs[1].template
			bShowBaptize = tpl2.quality > 2

			if tpl2.lv <= g_Hero:GetLevel() and (tpl1.property[1][2] < tpl2.property[1][2]) then
				bShowEh = true
			else
				bShowEh = false
			end
		end
	end

	for i,v in ipairs(cti.Paras) do
		if v.name then --and string.len(v.name) > 0			
			local tips = GetPanelGameObject(v.name, false,i);
			if (tips and v.objs) then

				tips:SetData(v.objs,bShowBaptize,bShowEh);
			end			
		end
	end
	bUseFixedPosition = cti.UseFixedPosition	
end
	
function CPanelTips:OpenSimpleTips(cti)
	--bUseFixedPosition = false;
	bUseFixedPosition = cti.UseFixedPosition
	local tips = GetPanelGameObject("TipsCommonPanel", true);
	if (tips and TipsTextItem ) then
		for _,text in ipairs(cti.Paras) do
			local item = tips:AddItem(TipsTextItem,cti.rectOffset);			
			if (item ) then
				if (cti.Width > 0) then
					item.Label.width = cti.Width;
				end
				item.Label.text = text;		
				tips:OnItemChanged()				
			end
		end
	end	
end

function CPanelTips:ShowPanel()
	for _,tips in ipairs(tipsList) do
		if tips then
			tips:Reposition();
		end	
	end
	self:UpdatePosition();
end

function CPanelTips:UpdatePosition()

	self:CalculateSize();	
	local mPos = Vector3.zero;
	local hoverSize = Vector3.zero;
	local hoverCenter = Vector3.zero;		
	if (bUseFixedPosition) then	
		--mPos = Vector3(FixedRect.x, FixedRect.y, 0);
		mPos = UIUtility.WorldToScreenPoint(Vector3(FixedRect.x, FixedRect.y, 0));
		--mPos = mPos + PosToScreen(Vector3 (FixedRect.width / 2, FixedRect.height / 2, 0));
		hoverSize = Vector3(FixedRect.width, FixedRect.height, 0);
		mPos = CalculatePosition(mPos, PosToScreen(hoverSize));
		
		transform.position = UIUtility.ScreenToWorldPoint(mPos);
		mPos = transform.localPosition;
		mPos.x = Mathf.Round(mPos.x + mSize0.x / 2);
		mPos.y = Mathf.Round(mPos.y - mSize0.y / 2 - mSize0.w);
		mPos.z = 0;
		transform.localPosition = mPos;		
	else
		local collider = LuaHelp.TipsTriggerCollider;						
		if not IsNil(collider) then		
			hoverSize = collider.bounds.size;
			hoverCenter = collider.bounds.center;			
			
			mPos = UIUtility.WorldToScreenPoint(collider.transform.position);
			mPos = mPos + PosToScreen(hoverCenter);			
			
			mPos = CalculatePosition(mPos, PosToScreen(hoverSize));
			
			transform.position = UIUtility.ScreenToWorldPoint(mPos);
			mPos = transform.localPosition;
			mPos.x = Mathf.Round(mPos.x + mSize0.x / 2);
			mPos.y = Mathf.Round(mPos.y - mSize0.y / 2 - mSize0.w);
			mPos.z = 0;
			transform.localPosition = mPos;	
		else
			UIUtility.HidePanel(UIUtility.RESERVED_SCREEN, "TipsPanel");
		end	
	end
end
	
function CPanelTips:CalculateSize()
	mSize = Vector3.zero;		
	for _,tips in ipairs(tipsList) do
		log('CalculateSize' .. tips.gameObject.name);
		if tips then
			local w = mSize.x;				
			local tipsWidth = tips.background.width;
			local tipsHeight = tips.background.height;
			
			mSize.x = mSize.x + tipsWidth;
			mSize.y = math.max(mSize.y, tipsHeight);
			
			local pos = tips.gameObject.transform.localPosition;
			pos.x = pos.x + w;
			pos.x = Mathf.Round(pos.x);
			pos.y = Mathf.Round(pos.y);				
			tips.gameObject.transform.localPosition = pos;
		end
	end
		
	for _,tips in ipairs(tipsList) do
		if tips then
			local tipsHeight = tips.background.height;		
			local pos = tips.gameObject.transform.localPosition;				
			if (tipsHeight < mSize.y) then pos.y = pos.y + (mSize.y - tipsHeight) / 2; end		
			pos.x = Mathf.Round(pos.x);
			pos.y = Mathf.Round(pos.y);				
			tips.gameObject.transform.localPosition = pos;
		end
	end	
		
	if (#tipsList > 0) then
		mSize0.x = tipsList[1].background.width;
		mSize0.y = tipsList[1].background.height;
		mSize0.z = tipsList[1].gameObject.transform.localPosition.x;
		mSize0.w = tipsList[1].gameObject.transform.localPosition.y;
	end
end

---------------------------------------------------------------------
--interface
function CPanelTips.ShowTipsInternal(paras, clear,fixedPosition)
	tipsShowInfo = {} --new ShowCustomTipsInfo(paras, clear);
	tipsShowInfo.Type = ShowTipsTypes.Custom
	tipsShowInfo.Paras = paras
	tipsShowInfo.Clear = clear
	tipsShowInfo.UseFixedPosition = fixedPosition--false

	
	UIUtility.ShowPanel(UIUtility.RESERVED_SCREEN, "TipsPanel");
end

function CPanelTips.HideTips()
	tipsShowInfo = nil;
	UIUtility.HidePanel(UIUtility.RESERVED_SCREEN, "TipsPanel");			
end

function CPanelTips.ShowTips(tbl)
	if objs then
		CPanelTips.ShowTipsInternal( tbl, true ,false);	
	else
		CPanelTips.ShowTipsInternal( tbl, false ,false);	
	end
end

function CPanelTips.ShowFixedTips(tbl,rect)--name, objs,
	FixedRect = rect
	CPanelTips.ShowTipsInternal( tbl, true ,true);	
	-- if objs then
	-- 	CPanelTips.ShowTipsInternal( tbl, true ,true);	
	-- else
	-- 	CPanelTips.ShowTipsInternal( tbl, false,true );	
	-- end
end

function CPanelTips.ShowNormalTips(name1, objs1)
	CPanelTips.ShowTipsInternal({ { name=name1, objs=objs1,},}, true );		
end


function CPanelTips:OnButton(funName)
	if #tipsList <= 0 then return end
	if tipsList[1][funName] then
		tipsList[1][funName]()
	end
end

--多窗口tips
function CPanelTips:BeginMultiTips(clear,fixedPosition)
	tipsShowInfo = {}
	tipsShowInfo.Type = ShowTipsTypes.Custom
	tipsShowInfo.Clear = clear
	tipsShowInfo.UseFixedPosition = fixedPosition--false	
	tipsShowInfo.Paras = {}	
end
function CPanelTips:AddMultiTips(name1,objs1)
	tipsShowInfo.Paras[#tipsShowInfo.Paras+1] = { name=name1, objs=objs1,}
end
function CPanelTips:EndMultiTips(rect)
	FixedRect = rect
	UIUtility.ShowPanel(UIUtility.RESERVED_SCREEN, "TipsPanel");
end

return CPanelTips