require "logic.item.item"
--------------------------------------------------------------------
-- g_bagMgr
--------------------------------------------------------------------
g_bagMgr =
{
	m_bagCurSize = 0,
	m_bagSize = 20,	-- the default value when the player's vip level is equal to 0
	m_setItem = {},
}


function g_bagMgr:ClearData()
	self.m_setItem = {}
	self.m_bagCurSize = 0
end

--"1":{"id":1,"type":1001,"pos":1,"amount":1},
function g_bagMgr:InitBag(data)
	--self.m_setItem = data
	self.m_setItem = {}
	for _,v in pairs(data) do
		self.m_setItem[v.id] = CItem.new(v)
	end		
end

function g_bagMgr:GetBagItemIdex(idType)
	for k,v in pairs(self.m_setItem) do
		if v.type == idType then
			return k
		end
	end		
end

function g_bagMgr:UpdateBag(data)
	for _,v in pairs(data) do
		local index = self:GetBagItemIdex(v.type)
		if index then
			self.m_setItem[index] = CItem.new(v)
		else
			self.m_setItem[v.type] = CItem.new(v)
		end
	end	
	local temp = {}
	for _,v in pairs(self.m_setItem) do
		if v.amount > 0 then
			temp[v.type] = v
		end
	end
	self.m_setItem = temp
end

function g_bagMgr:GetBagItems()
	return self.m_setItem
end

function g_bagMgr:GetMaxSize()
    return 80
end

function g_bagMgr:SetSize(size)
    self.m_bagSize = size
end

function g_bagMgr:GetSize()
    return self.m_bagSize
end

-- function g_bagMgr:HaveItem(id)
--     for _,item in pairs(self.m_setItem) do
--         if item:GetID() == id then
-- 			return true
--         end
--     end
-- 	return false
-- end
function g_bagMgr:GetItem(idType)
	for _,v in pairs(self.m_setItem) do
		if v.type == idType then
			return v
		end
	end	
end

function g_bagMgr:GetItemCount(idType)
	for _,v in pairs(self.m_setItem) do
		if v.type == idType then
			return v.amount
		end
	end	
	return 0
end