
--基础库
function log( info )
	if type(info) == 'table' then
		LuaHelp.Log(info:__tostring())
	else
		LuaHelp.Log(info)
	end
end
function logwarning( info )
	if type(info) == 'table' then
		LuaHelp.LogWarning(info:__tostring())
	else	
		LuaHelp.LogWarning(info)
	end	
end
function logerror( info )
	if type(info) == 'table' then
		LuaHelp.LogError(info:__tostring())
	else	
		LuaHelp.LogError(info)
	end	
end

-- function logVar(info,nJi)
-- 	local nJJJ = nJi or 0

-- 	if type(info) ~= 'table' then
-- 		if info == nil then
-- 				logerror("The input is a nil value.")
-- 		elseif type(info) == 'boolean' then
-- 			logerror(info)
-- 		else
-- 			logerror("data="..info)
-- 		end
-- 		return
-- 	end

-- 	for i,v in pairs(info) do
-- 		if type(v) ~= 'table' then
-- 			logerror("nJJJ="..nJJJ..",key="..i..",data="..v)
-- 		else
-- 			logerror("nJJJ="..nJJJ..",key="..i.." is a table,length = "..#v)
-- 			logVar(v,nJJJ+1)
-- 		end
-- 	end
-- end

function logType(info)
	logerror(tostring(info)..","..type(info))
end
function logVar(info)
	if type(info) ~= 'table' then
		logerror(tostring(info)..","..type(info))
	else
		logerror(ReturnTableString(info))
	end
end
--返回表数据
function ReturnTableString(data,cstring,allstring)
    if cstring == nil then
        cstring = '';    
    end
    if allstring == nil then
        allstring = '';    
    end
    if data == nil then   
        allstring = allstring .. 'core.print data is nil\n'
    end  
    local cs = cstring .. "    ";  
    allstring = allstring .. cstring .."{\n"
    if(type(data)=="table") then  
        for k, v in pairs(data) do  
            allstring = allstring .. cs..tostring(k).." = "..tostring(v).."\n"
            if(type(v)=="table") then  
                allstring = allstring..ReturnTableString(v,cs)
            end  
        end  
    else  
        allstring = allstring .. cs..tostring(data).."\n"
    end  
    allstring = allstring .. cstring .."}".."\n"
    return allstring
end  


function __FILE__()
return debug.getinfo(2,'S').source
end
function __LINE__()
return debug.getinfo(2, 'l').currentline
end

function _PLOG(str)
str = str or '==='
local info = debug.getinfo(2,'S').source.."["..debug.getinfo(2, 'l').currentline.."]"
logerror("==="..info..str.."===")
end

function logMsg(jsData)

	if jsData.MsgType and jsData.Action and true then
		logerror("=============MsgType="..jsData.MsgType..",Action="..jsData.Action.."================")
	end
end



function logAddMsg(jsData)

	local str = "MsgType="..jsData.MsgType..",Action="..jsData.Action.."\n"
	CPanelMain.newMsg = CPanelMain.newMsg or ""
	CPanelMain.newMsg = CPanelMain.newMsg + str
end

function logPrintMsg()
	logVar(CPanelMain.newMsg)
	CPanelMain.newMsg = ""
end

--灰化图片
-- function GraySprite(sprite)
-- 	sprite.color = Color(0,0,0,1)
-- end

-- --恢复图片
-- function NormalSprite(sprite)
-- 	sprite.color = Color(1,1,1,1)
-- end

---------------------------------------------------------------
--控件系列函数
---------------------------------------------------------------
function GetCtrl(obj,childName,nowarning)
	local trans = LuaHelp.FindChild(obj,childName)
	if trans == nil and not nowarning then
		logerror('GetChildCtrl failed! childName:' .. childName)
		return
	end		
	return trans.gameObject
end
function GetSprite(obj,childName)
	local obj = GetCtrl(obj,childName)
	if not obj then
		return
	end		
	return obj:GetComponent('UISprite')
end
function GetLabel(obj,childName,nowarning)
	local obj = GetCtrl(obj,childName)
	if not obj then
		return
	end		
	return obj:GetComponent('UILabel')
end

function GetTexture(obj,childName)
	local trans = GetCtrl(obj,childName)
	if trans == nil then
		return
	end		
	return trans:GetComponent('UITexture')
end

function GetToggle(obj,childName)
	local trans = GetCtrl(obj,childName)
	if trans == nil then
		return
	end		
	return trans:GetComponent('UIToggle')
end


function GetButton(obj,childName)
	local trans = GetCtrl(obj,childName)
	if trans == nil then
		return
	end		
	return trans:GetComponent('UIButton')
end

function GetScrollView(obj,childName)
	local trans = GetCtrl(obj,childName)
	if trans == nil then
		return
	end		
	return trans:GetComponent('UIScrollView')
end
