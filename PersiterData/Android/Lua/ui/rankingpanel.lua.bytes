CRankingPanel ={}
CRankingPanel.wndname = 'RankingPanel'


function CRankingPanel:OnOpen (objScript)
	self.m_wnd = objScript.gameObject
	local ctrls = objScript.vecCtrl
	self.CmpScrollView = ctrls[0]:GetComponent("LitUIScrollView")
	self:OnOpenInternal ();
end

--框架调用
function CRankingPanel:OnOpenInternal ()
	self.CmpScrollView:RefreshData(0)
	--LuaHelp.PushPanel(self.monoScript, PanelStackOp.Close_Prev);
end
	
function CRankingPanel:OnClose ()
	--LuaHelp.PopPanel(self.monoScript, PanelStackOp.Open_Prev);
end


function CRankingPanel:Update(time)
	

end

function CRankingPanel:OnUpdateScrollData()
	local scrollItem = LuaHelp.LastCtrl
    scrollItem:FillUserItems(function(dIndex, go)
    	local relIndex = dIndex+1
    	logwarning('relindex:'..relIndex)
		if relIndex <= 60 then			
			local item = CRankingPanel:GetItemTbl(go)
			item:SetData(relIndex)
			return true
		else
			go:SetActive(false)
			return false
		end
    end)
end

local ItemCtrls = {}
function CRankingPanel:GetItemTbl(obj)
	local index
	for k,v in ipairs(ItemCtrls) do
       print("k".. k .. "  v".. v.obj.name)        
		if obj == v.obj then
			index = k
		end	
	end
	if not index then
		local temp = {}
		temp.obj = obj
		temp.obj:SetActive(true)
		temp.lv = GetLabel(obj, "LblLV")

		temp.SetData = function (self, lv)
			self.obj:SetActive(true)
			self.lv.text = lv
	
		end
		index = #ItemCtrls+1 
		ItemCtrls[index] = temp
	end
    if not (index ==nil) then
	    print("len:".. #ItemCtrls .. "--" .. ItemCtrls[index].obj.name)
    end
	return ItemCtrls[index]
end

return CRankingPanel